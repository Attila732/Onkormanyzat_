Az BodyComponent osztály felelős a hírek kezeléséért és megjelenítéséért a felhasználói felületen. Itt tárolódnak az új cikkek, valamint az országos és helyi hírek listái, valamint azok a feliratkozások, amelyek figyelik a hírszolgáltatást és az autentikációs szolgáltatást.

Tulajdonságok:

news: Hir[] - Tömb az új hírek tárolására.
newArticle: Hir - Egy Hir típusú példány az új hírcikk adatainak tárolására.
subscriptions: Subscription[] - Tömb az előfizetésekre az emlékeztetők biztosítására.
user: ProfilAdatok | null - A felhasználói profil adatai vagy null, ha nem elérhető.
userRoles: any - Objektum a felhasználói szerepek tárolására.
international: Hir[] - Tömb az nemzetközi hírek tárolására.
national: Hir[] - Tömb az országos hírek tárolására.
local: Hir[] - Tömb a helyi hírek tárolására.
orgs: { id: string; name: string }[] - Tömb a szervezetek adatainak tárolására.

Metódusok:

ngOnInit(): void: Akkor hívódik meg, amikor az Angular befejezte az összes adatkötött tulajdonság inicializálását. Hívja a getUserInfo() és a getNews() metódusokat.
ngOnDestroy(): void: Akkor hívódik meg, amikor az Angular megsemmisíti a komponenst. Leiratkozik az összes előfizetésről a memóriaszivárgások elkerülése érdekében.
getNews(): void: Metódus a helyi, országos és nemzetközi hírek lekérdezésére.
getInterNational(): void: Metódus a nemzetközi hírek lekérdezésére a NewsService segítségével.
getNational(): void: Metódus az országos hírek lekérdezésére a NewsService segítségével.
getLocal(): void: Metódus a helyi hírek lekérdezésére a NewsService segítségével.
getUserInfo(): void: Metódus a felhasználói információk és szerepek lekérdezésére az AuthService segítségével.
changeOrg(event: Event): void: Eseménykezelő a szervezet kiválasztásának változására.
submitNewArticle(): void: Metódus az új hírcikk beküldésére. Ellenőrzi, hogy a felhasználó szervezeti adminisztrátor-e, majd beküldi a hírt.
deleteLocalNews(news: any): void: Metódus a helyi hírek törlésére.
deleteNews(news: Hir): void: Metódus a hírek törlésére a NewsService segítségével.
editLocalNews(news: any): void: Metódus a helyi hírek szerkesztésére.
editNews(news: Hir): void: Metódus a hírek szerkesztésére a NewsService segítségével.



-----------------------------------------------------------------eladó termekek-----------------------------------------------------------------------------

Eladó Termékek Komponens (EladoTermekComponent)
Az EladoTermekComponent felelős az eladó termékek kezeléséért és megjelenítéséért a felhasználói felületen.

Tulajdonságok:

showSellerInfo: boolean - Logikai érték arra vonatkozóan, hogy megjelenítsük-e az eladó információit.
eladoTermek: EladoTermekAdatok - Az új termék adatait tároló objektum.
buttonClicked: boolean - Logikai érték arra vonatkozóan, hogy a gombra kattintottak-e.
pagenum: number - Oldalszám az oldalak navigálásához.
userRoles: any - Felhasználói szerepek tárolása.
user: ProfilAdatok | null - Felhasználói profil adatai vagy null, ha nincs elérhető.
subscriptions: Subscription[] - Az előfizetések tömbje a memóriaszivárgás elkerülése érdekében.
conditions: { key: string, text: string }[] - Tömb az állapotok kulcsa és szövegének tárolására.
termekek: TermekKepekkel[] - Tömb az eladó termékek tárolására képekkel együtt.
termekekFree: TermekKepekkel[] - Tömb a meghirdetett termékek tárolására képekkel együtt.

Metódusok:

getUserInfo(): void - Felhasználói információk és szerepek lekérdezése az AuthService segítségével.

setupDataAndSend(): void - Az új termék adatainak beállítása és küldése a szerverre.

ngOnInit(): void - Akkor hívódik meg, amikor az Angular befejezte az összes adatkötött tulajdonság inicializálását. Inicializálja a felhasználói adatokat és a termékek listáját.

getTermekek(pageNum: number, price: number): void - Metódus az eladó termékek lekérdezésére a TermekkezeloService segítségével.

getTermekekFree(pageNum: number): void - Metódus a meghirdetett termékek lekérdezésére a TermekkezeloService segítségével.

addBoolErdekel(): void - Logikai értékek hozzáadása az "erdekel" tulajdonsághoz.

onSubmit(): void - Beküldés gomb eseménykezelője.

toggleForm(): void - Űrlap megjelenítésének váltása.

elrejt(): void - Űrlap elrejtése.

translateCondition(cond: string): string - Állapot szövegfordító metódus.

toggleSellerInfo(item: any): void - Az eladó információinak megjelenítésének váltása.

ngOnDestroy(): void - Akkor hívódik meg, amikor az Angular megsemmisíti a komponenst. Leiratkozik az összes előfizetésről a memóriaszivárgások elkerülése érdekében.


Képfeltöltéshez kapcsolódó metódusok:

_onFilesChanged(files: FileList): void - Fájlok kiválasztásának eseménykezelője.
_onReset(): void - Kiválasztott fájlok törlésének eseménykezelője.
_reset(): void - Fájlkiválasztó visszaállítása.

Oldalnavigációval kapcsolatos metódusok:

decreasePageNum(): void - Oldalszám csökkentése.
increasePageNum(): void - Oldalszám növelése.

Adatszolgáltatás (TermekkezeloService)
A TermekkezeloService felelős az eladó termékek adatkezeléséért.

Metódusok:

getTermekekFree(pageNum: number): Observable<TermekKepekkel> - Metódus a meghirdetett termékek lekérdezésére.
getTermekek(pageNum: number, price: number): Observable<TermekKepekkel> - Metódus az eladó termékek lekérdezésére.
postTermek(termek: any): Observable<any> - Metódus az új termék beküldésére.
updateTermek(body: any): Observable<any> - Metódus a termék frissítésére.
deleteTermek(id: any): Observable<any> - Metódus a termék törlésére.
getTermekekForUserById(id: any): Observable<TermekKepekkel> - Metódus az adott felhasználó által meghirdetett termékek lekérdezésére.



-------------------------------------------------------------------felhasználókeres komponens-----------------------------------------

Felhasználók Keresése Szolgáltatás (FelhaszKeresService)
A FelhaszKeresService felelős a felhasználók kereséséért és kezeléséért.

Metódusok:
getAdminAdatok(value: string, pageNum: number, category: string): Observable<AdminAdatok[]> - Metódus az adminisztrációs adatok lekérdezésére.

value: A keresési érték.
pageNum: Az oldalszám.
category: A keresési kategória.
getProfilAdatok(value: string, pageNum: number, category: string): Observable<ProfilAdatok[]> - Metódus a profil adatok lekérdezésére.

value - A keresési érték.
pageNum - Az oldalszám.
category - A keresési kategória.
updateUser(body: any): Observable<any> - Metódus a felhasználó frissítésére.

body - A frissítendő felhasználó adatai.
deleteUser(id: any): Observable<any> - Metódus a felhasználó törlésére.

id - A törlendő felhasználó azonosítója.

Felhasználók Táblázat Megjelenítése

Az alábbi HTML kód egy táblázatot jelenít meg a felhasználók adataival:

<div class="container mx-auto mt-5">
	<table class="table table-striped">
		<thead>
			<tr>
				<th>id</th>
				<th>Email</th>
				<th>Felhasználónév</th>
				<th>Keresztnév</th>
				<th>Vezetéknév</th>
				<th>Telefon</th>
				<th>Szerkeszt</th>
				<th>Töröl</th>
				<th>Típus választó</th>
			</tr>
		</thead>
		<tbody>
			<tr *ngFor="let user of felhasznalok">
				<td *ngFor="let col of columns">
					<input [type]="col.type" [(ngModel)]="user[col.key]">
				</td>
				<td>
					<div class="col">
						<button type="button" class="w-full md:w-[30%] text-xl text-cstm-gray hover:text-cstm-gray mb-4 border-3 border-cstm-purple bg-cstm-purple hover:bg-cstm-purple rounded-xl px-3 py-2 shadow-xl hover:shadow-cstm-dark-purple transform transition duration-500" (click)="updateUser(user)">Mentés</button>
					</div>
				</td>
				<td>
					<div class="col">
						<button type="button" class="w-full md:w-[30%] text-xl text-cstm-dark_gray hover:text-cstm-gray mb-4 border-3 border-cstm-purple hover:bg-cstm-purple rounded-xl px-3 py-2 shadow-xl hover:shadow-cstm-dark-purple transform transition duration-500" (click)="deleteUser(user)">Törlés</button>
					</div>
				</td>
				<td>
					<select
						type="text"
						id="condition"
						name="condition"
						class="w-[50%] h-fit text-cstm-dark_gray focus:scale-105 focus:text-cstm-purple shadow-xl focus:shadow-cstm-dark-purple outline-none caret-cstm-purple text-lg py-2 px-3 rounded-[14px] focus:border-[3px] border-cstm-purple">
						<option value="termekek">Termékek</option>
						<option value="idopontok">Időpontok</option>
						<option value="szervezesek">Szervezések</option>
						<option value="bejelentesek">Bejelentések</option>
					</select> 
				</td>
			</tr>
		</tbody>
	</table>
</div>
A táblázat minden sorában lehetőség van a felhasználó adatainak szerkesztésére és törlésére. A "Típus választó" oszlopban egy legördülő lista található a felhasználó típusának kiválasztására.

A *ngFor direktíva segítségével iterálunk végig a felhasználók listáján, és minden felhasználó adatai egy-egy sorban jelennek meg. A *ngFor direktíva segítségével több oszlopot is létrehozhatunk az adatok megjelenítéséhez.


-------------------------------------------------------------------------------jelentéskezeló----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Jelentéskezelő Komponens
A Jelentéskezelő komponens a felhasználók jelentéseinek kezeléséért felelős. Az alábbiakban bemutatjuk a komponens részleteit:

Űrlap
Az űrlap lehetővé teszi a felhasználók számára, hogy új jelentést küldjenek be. Az űrlapon az alábbi mezők találhatók:

Típus: A felhasználó kiválaszthatja a jelentés típusát a legördülő menüből. Lehetősége van közterületi, úthiba, víz-gáz, lomtalanítás vagy szemétszállítás jelentést küldeni.
Súlyosság: A jelentés súlyosságát lehet kiválasztani egy másik legördülő menüből, amely tartalmazza a "Nagyon Súlyos", "Súlyos", "Zavaró", "Meh" és "Megjegyzés" opciókat.
Telefonszám: A felhasználó megadhatja a telefonszámát, amelyen keresztül a hatóságok elérhetik.
Leírás: A jelentés tartalmazhat egy rövid leírást a problémáról vagy incidensről.
Helyszín: A jelentéshez tartozó helyszín megadása.
Dátum: A jelentés dátumának és időpontjának megadása.
Az űrlapon található egy "Bejelentés Küldése" gomb, amelyet a felhasználó megnyomhat a jelentés elküldéséhez.

Felugró Üzenetek
A komponens két felugró üzenetet is tartalmaz, amelyek a jelentés elküldésének vagy sikertelen elküldésének visszaigazolására szolgálnak:

Jelentés Elküldve: Ha a jelentés sikeresen elküldésre került, egy felugró ablak jelenik meg a "Jelentés elküldve!" címmel és a megfelelő üzenettel.
Sikertelen Jelentés: Ha a jelentés elküldése sikertelen volt, egy másik felugró ablak jelenik meg a "Sikertelen jelentés!" címmel és a megfelelő üzenettel.
Mindkét üzenet tartalmaz egy "Bezárás" gombot, amely segítségével a felhasználó bezárhatja az üzenetet.

Autentikáció és Szolgáltatások
A komponens használja az AuthService és JelenteskezeloService szolgáltatásokat az autentikációhoz és a jelentések kezeléséhez.

JelenteskezeloService
A JelenteskezeloService szolgáltatás felelős a jelentések kezeléséért és a hozzájuk kapcsolódó HTTP kérések végrehajtásáért. A szolgáltatás az alábbi funkciókat kínálja:

postJelentes(body: BejelentesAdatok): Új jelentés beküldése.
updateJelentes(body: any): Jelentés frissítése.
deleteJelentes(id: any): Jelentés törlése.
getSajatJelentesek(id: any): Felhasználó saját jelentéseinek lekérése.
getAllJelentesek(id: any): Minden jelentés lekérése.
updateJelentesOrg(body: any): Szervezeti jelentés frissítése.
deleteJelentesOrg(id: any): Szervezeti jelentés törlése.
getSajatJelentesekOrg(id: any): Szervezeti jelentések lekérése.
searchName(pageNum:number, name:string): Név alapján keresés a szervezetek között.
A szolgáltatás használja a BejelentesAdatok modellt a jelentések adatainak reprezentálásához.

Komponens Életciklusa
A JelenteskezeloComponent életciklusának során figyelemmel kíséri a feliratkozásokat, és azok megszüntetésekor leiratkozik a feliratkozásokról. Ez segít elkerülni a memóriaszivárgást és a nem kívánt viselkedést.

-------------------------------------------------------------------------------------------------------navigáció komponens-------------------------------------------------------------------------------------------------------------------------------------------------
NavComponent
Leírás:
A NavComponent felelős a navigációs sáv megjelenítéséért és működéséért az alkalmazásban. Az összecsukható menü és a navigációs elemek kezelése, valamint a felhasználói jogosultságok alapján történő elemek megjelenítése is ebben a komponensben történik.

Tulajdonságok:
isMenuOpen: Logikai érték, amely azt jelzi, hogy az összecsukható menü éppen nyitva vagy zárva van.
roles: A felhasználó szerepének adatait tároló objektum.
isDesktopView: Logikai érték, amely azt jelzi, hogy az alkalmazás éppen asztali nézetben van-e.
isMobileView: Logikai érték, amely azt jelzi, hogy az alkalmazás éppen mobil nézetben van-e.
isNavbarOpen: Logikai érték, amely azt jelzi, hogy a navigációs sáv éppen nyitva vagy zárva van.
isMobile: Logikai érték, amely azt jelzi, hogy az alkalmazás éppen mobil eszközön fut-e.
subs: Feliratkozásokat tároló tömb az Observable-k figyeléséhez.
Metódusok:
toggleMenu(): Az összecsukható menü állapotának váltása (nyitva vagy zárva).
toggleNavbar(): A navigációs sáv állapotának váltása (nyitva vagy zárva).
onResize(event: any): A böngészőablak méretváltozásának eseménykezelője, amely frissíti a képernyőméret függvényét.
checkScreenSize(): Ellenőrzi az alkalmazás jelenlegi képernyőméretét, és beállítja az isMobileView és isDesktopView tulajdonságokat ennek megfelelően.
logout(): Kijelentkezési funkció, ami a AuthService segítségével végzi a kijelentkezést.
redirectToLogin(): Átirányítás a bejelentkező oldalra.
Életciklus metódusok:
ngOnInit(): Az alkalmazás indulásakor lefutó metódus, amely beállítja a kezdeti értékeket és feliratkozik a felhasználói szerepek Observable-jára.
Animáció:
fadeInOut: Az összecsukható menü animációját kezelő trigger. Amikor az menü megjelenik vagy eltűnik, a void és a nem void állapotok közötti átmenetet vezérli.
Megjegyzés:
A NavComponent alapvetően egy Angular komponens, amely felelős a navigációs sáv működtetéséért és a felhasználói interakciók kezeléséért az alkalmazásban. A HTML kódot az Angular templating rendszerével kombinálva a NavComponent dinamikusan változtathatja a megjelenést és a funkcionalitást a felhasználói interakciók alapján.



----------------------------------------------------------------------------------------------------profilkomponens-----------------------------------------------------------------------------------------------------------------------

Komponens Funkcionalitása:
A komponens neve ProfilComponent.
Profil adatokat kér be a bejelentkezett felhasználóról.
Lehetőséget biztosít a felhasználó számára a profilinformációk szerkesztésére.
Űrlapot biztosít a profil részleteinek szerkesztéséhez, mint például a keresztnév, vezetéknév, email, felhasználónév és telefonszám.
Funkcióval rendelkezik az átváltás közötti szerkesztési mód és megtekintési mód között.
Funkcióval rendelkezik a profilban történő változtatások mentéséhez.
Tartalmaz egy képfeltöltési funkciót.
Dokumentáció:
ProfilComponent Osztály:
Tulajdonságok:

profil: Objektum a felhasználó profiladatainak reprezentálásához.
user: Objektum a bejelentkezett felhasználó adatainak reprezentálásához.
isEditing: Logikai érték a szerkesztési és megtekintési mód közötti váltáshoz.
subscription: Tömb az előfizetések tárolására, amik a komponens megsemmisítésekor történő takarításra szolgálnak.
isDisabled: Logikai érték a mezők letiltásához, amikor nincs szerkesztési mód.
Metódusok:

ngOnInit(): Életciklus horgonycsomópont, amelyet akkor hívnak meg, amikor az Angular inicializálja az összes adatkötött tulajdonságot egy direktívában.
ngOnDestroy(): Életciklus horgonycsomópont, amelyet azonnal megelőzően hív meg az Angular, mielőtt megsemmisítené a direktívát vagy a komponenst.
enableEdit(): Metódus a profilmezők szerkesztésének engedélyezésére.
getUserInfo(): Metódus a felhasználói információk lekéréséhez, ideértve a profiladatokat is.
toggleEditing(): Metódus az átváltás közötti szerkesztési mód és megtekintési mód között.
saveChanges(): Metódus a profilban történt változtatások mentésére.
onFileSelected(event: any): Metódus a fájlkiválasztás kezelésére képfeltöltéshez.
readImage(file: File): Metódus a fájl beolvasásához és átalakításához base64 kóddá.


------------------------------------------------------------------------saját időpont komponens--------------------------------------------------------------------------------------------

Komponens Funkcionalitása:
A komponens neve SajatIdopontokComponent.
Lehetővé teszi a felhasználók számára, hogy időpontokat foglaljanak orvoshoz és ezeket a foglalásokat kezeljék.
A felhasználói felületet dinamikusan generálja az Angular Directives segítségével.
Dokumentáció:
SajatIdopontokComponent Osztály:
Tulajdonságok:

idopontModel: Egy példány az IdopontAdatok osztályból, amely tartalmazza az időpont foglalásához szükséges adatokat.
user: Az aktuális bejelentkezett felhasználó adatainak reprezentációja.
subscription: Tömb az előfizetések tárolására, amelyek a komponens megsemmisítésekor történő takarításra szolgálnak.
orvosok: Tömb, amely az elérhető orvosok adatait tartalmazza.
idopontok: Tömb az időpontok adatainak tárolására.
orgs: Tömb az elérhető szervezetek (orvosi rendelők stb.) adatainak tárolására.
userRoles: Objektum a felhasználó szerepeinek tárolására.
admin: Logikai érték, amely azt jelzi, hogy a felhasználó adminisztrátori jogosultsággal rendelkezik-e.
orgAdmin: Logikai érték, amely azt jelzi, hogy a felhasználó szervezeti adminisztrátori jogosultsággal rendelkezik-e.
orgBooleanIdopontok: Logikai érték, amely azt jelzi, hogy az időpontokat megjelenítik-e szervezetek alapján.
Metódusok:

ngOnInit(): Életciklus horgonycsomópont, amelyet akkor hívnak meg, amikor az Angular inicializálja az összes adatkötött tulajdonságot egy direktívában.
getOrvosok(): Metódus az elérhető orvosok lekéréséhez és betöltéséhez.
getUserInfo(): Metódus a felhasználói adatok lekéréséhez és betöltéséhez, ideértve a szerepeket és az elérhető szervezeteket is.
inputForm(): Metódus az időpont foglalására szolgáló űrlap kezeléséhez.
ngOnDestroy(): Életciklus horgonycsomópont, amelyet azonnal megelőzően hív meg az Angular, mielőtt megsemmisítené a direktívát vagy a komponenst.
getSajatIdopontok(user: any): Metódus a felhasználóhoz rendelt időpontok lekéréséhez.
getOrgIdopontok(orgId: string): Metódus az adott szervezethez rendelt időpontok lekéréséhez.
updateSajatIdopont(termek: any): Metódus egy adott időpont szerkesztéséhez vagy frissítéséhez.
deleteSajatIdopont(termek: any): Metódus egy adott időpont törléséhez.
orgAdminKeres(): Metódus az orgAdmin logikai érték beállításához.
adminKeres(): Metódus az admin logikai érték beállításához.
orgRequest(): Metódus az időpontok lekéréséhez az adott szervezethez.


-----------------------------------------------------saját jelentések komponens--------------------------------------------------------------------

HTML kódrészletek: A HTML kód részletei az Angular komponenssel vannak összekapcsolva. Ez a kód definiálja az oldal struktúráját és a felhasználói felületet.

Angular komponens: Az Angular komponens felelős az üzleti logika és az adatok megjelenítésének kezeléséért. Ez a kód kapcsolódik az adatszolgáltatáshoz és a felhasználói interakciókhoz.

Szolgáltatások és modellek: Az alkalmazás logikáját és adatmodelljeit definiáló szolgáltatások és modellek.

A dokumentációban részletesen leírjuk az Angular komponens főbb funkcióit és az alkalmazás által használt modelleket és szolgáltatásokat.

HTML kód részletei:
A HTML kód tartalmazza az oldal felhasználói felületének struktúráját és a komponensek közötti adatkötéseket.

Az első rész az Angular *ngIf és *ngFor direktíváival egy adminisztrátor szerepkörét ellenőrzi, majd egy jelentéslista formázására használja az ngFor direktívát.
A második rész egy táblázatot jelenít meg, amelyben a felhasználók jelentésadatai találhatók.
A harmadik rész egy további táblázatot jelenít meg, amely a jelentések adatait tartalmazza.
Angular komponens:
Az Angular komponens felelős az alkalmazás logikájának és működésének vezérléséért.

Az OnInit interfész implementálása a komponens életciklusának kezelésére szolgál.
Az getUserInfo metódus lekéri a felhasználó adatait és szerepköreit, majd a megfelelő jelentéseket betölti.
A getJelentesek metódus a felhasználó jelentéseinek betöltésére szolgál.
A updateSajatJelentes és deleteSajatJelentes metódusok a felhasználó jelentéseinek frissítésére és törlésére szolgálnak.
A searchPeople metódus egy típusahead funkciót implementál a felhasználók kereséséhez.
Az onSelectItem metódus a kiválasztott felhasználói elem kezeléséért felelős.
A loadAdminAdatok és loadProfilAdatok metódusok a felhasználói adatok betöltéséért felelősek.
Szolgáltatások és modellek:
A szolgáltatások és modellek az alkalmazás adatmodelljét és logikáját definiálják.

A JelenteskezeloService és az AuthService szolgáltatások az alkalmazás adatkezelését végzik.
A BejelentesAdatok, ProfilAdatok, AdminAdatok modellek az alkalmazás adatstruktúráját definiálják.
Az Enums fájl az alkalmazásban használt enumerációkat tartalmazza.


------------------------------------------------------------saját szervezések komponens_---------------------------------------------------------------------------------------------------------------

HTML kód részletei:
Az HTML kód definiálja az oldal felhasználói felületének struktúráját és a komponensek közötti adatkötéseket.

Az első táblázatban egy űrlapot találunk a szervezet nevének kiválasztásához és a szervezetek lekéréséhez.
Az űrlap része egy beviteli mező a szervezet nevének megadásához, valamint egy gomb a lekérés funkció indításához.
A második táblázatban jelennek meg a szervezések adatai, melyeket szerkeszteni és törölni is lehet.
Angular komponens:
Az Angular komponens felelős az alkalmazás üzleti logikájának és működésének irányításáért.

Az OnInit interfész implementálása a komponens életciklusának kezelésére szolgál.
Az getUserInfo metódus lekéri a felhasználó adatait és szerepköreit.
Az inputForm metódus létrehozza az új szervezést.
A getSajatSzervezes metódus lekéri a felhasználó saját szervezéseit.
Az updateSzervezes és deleteSzervezes metódusok a szervezések frissítéséért és törléséért felelősek.
Szolgáltatások és modellek:
A szolgáltatások és modellek az alkalmazás adatmodelljét és logikáját definiálják.

A SzervezesService és az AuthService szolgáltatások az alkalmazás adatkezelését végzik.
A ProfilAdatok és SzervezesAdatok modellek az alkalmazás adatstruktúráját definiálják.
A dokumentáció segít megérteni az alkalmazás felépítését és működését, valamint megkönnyíti a kódolást és a fejlesztést.


<div class="container mx-auto mt-5">
	<table class="table table-striped">
		<thead>
			<tr>
				<th>Szervezet neve:</th>
				<th>Szervezések lekérése</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>
					<input
						[value]="currentOrganization['name']"
						[ngbTypeahead]="searchPeople"
						(selectItem)="onSelectItem($event)"
						[resultFormatter]="resultFormatter"
						[inputFormatter]="inputFormatter"
						class="form-control"
						placeholder="Szervezet neve"
						type="text"
					/>
				</td>
				<td>
					<button type="button"
					class="w-full md:w-[30%] text-xl text-cstm-gray hover:text-cstm-gray mb-4 border-3 border-cstm-purple bg-cstm-purple hover:bg-cstm-purple rounded-xl px-3 py-2 shadow-xl hover:shadow-cstm-dark-purple transform transition duration-500"
					(click)="getSajatSzervezes()" [disabled]="currentOrganization==null">Lekérés</button>
				</td>
			</tr>

			<tr *ngFor="let szervezes of szervezesek">
				<td *ngFor="let col of szervezesekColumns">
					<input [type]="col.type" [(ngModel)]="szervezes[col.key]" />
				</td>
				<td>
					<button type="button"
					class="w-full md:w-[30%] text-xl text-cstm-gray hover:text-cstm-gray mb-4 border-3 border-cstm-purple bg-cstm-purple hover:bg-cstm-purple rounded-xl px-3 py-2 shadow-xl hover:shadow-cstm-dark-purple transform transition duration-500"
					(click)="updateSzervezes(szervezes)">Mentés</button>
				</td>
				<td>
					<button type="button"
					class="w-full md:w-[30%] text-xl text-cstm-dark_gray hover:text-cstm-gray mb-4 border-3 border-cstm-purple hover:bg-cstm-purple rounded-xl px-3 py-2 shadow-xl hover:shadow-cstm-dark-purple transform transition duration-500"
					(click)="deleteSzervezes(szervezes)">Törlés</button>
				</td>
				<td>

				</td>
			</tr>
		</tbody>
	</table>
</div>

Az első táblázatban egy űrlapot találunk, amely lehetővé teszi a felhasználó számára, hogy megadja a szervezet nevét és lekérje a hozzá tartozó szervezéseket.
Az űrlap része egy beviteli mező a szervezet nevének megadásához és egy gomb a lekérés funkció indításához.
A második táblázatban megjelennek a szervezések adatai, amelyek szerkeszthetők és törölhetők.

import { Component, OnDestroy, OnInit } from '@angular/core';
import { NgbTypeaheadSelectItemEvent } from '@ng-bootstrap/ng-bootstrap';
import { Observable, Subscription, debounceTime, distinctUntilChanged, filter, switchMap } from 'rxjs';
import { AuthService } from '../auth.service';
import { JelenteskezeloService } from '../jelenteskezelo.service';
import { ProfilAdatok } from '../models/ProfilAdatok';
import { SzervezesAdatok } from '../models/SzervezesAdatok';
import { SzervezesService } from '../szervezes.service';

@Component({
  selector: 'app-sajat-szervezesek',
  templateUrl: './sajat-szervezesek.component.html',
  styleUrls: ['./sajat-szervezesek.component.css']
})
export class SajatSzervezesekComponent implements OnInit, OnDestroy{
  // Deklarációk és inicializációk...

  ngOnInit(): void {
    this.getUserInfo()
  }

  getUserInfo(){
    // Felhasználó adatainak lekérése...
  }

  inputForm() {
    // Űrlapkezelés és új szervezés létrehozása...
  }  

  getSajatSzervezes() {
    // Felhasználó saját szervezéseinek lekérése...
  } 

  updateSzervezes(szervezes:any){
    // Szervezés frissítése...
  }
  
  deleteSzervezes(szervezes:any){
    // Szervezés törlése...
  }

  // Egyéb metódusok, például keresési funkció, feliratkozások kezelése, stb...
}
Az OnInit interfész implementálása a komponens életciklusának kezelésére szolgál.
Az getUserInfo metódus lekéri a felhasználó adatait és szerepköreit.
Az inputForm metódus létrehozza az új szervezést.
A getSajatSzervezes metódus lekéri a felhasználó saját szervezéseit.
Az updateSzervezes és deleteSzervezes metódusok a szervezések frissítéséért és törléséért felelősek.

-----------------------------------------------------------------------------------------------sajaát termekek komponens-------------------------------------------------------------------------------------



HTML kód részletei:
Az első részben egy gomb jelenik meg, ami az admin funkciókat indítja el, ha a felhasználó rendelkezik adminisztrátori jogosultsággal.
A második részben a választógomb és a keresőmező található, ami az admin funkciókhoz tartozik.
A harmadik részben a termékek megjelenítése történik, amelyeket szerkeszthetünk és törölhetünk.
Angular komponens:
Az OnInit interfész implementálása a komponens életciklusának kezelésére szolgál.
A getUserInfo metódus lekéri a felhasználó adatait.
Egyéb metódusok az input mezők kezelésére, a termékek törlésére és frissítésére, stb.


--------------------------------------------------------------------resisztrációs komponens-----------------------------------------------------------
Regisztrációs Űrlap Komponens:
HTML Kód Részletek:
Egy teljesen responszív regisztrációs űrlap található itt.
A felhasználóknak lehetőségük van megadni a vezetéknevet, keresztnevet, felhasználónevet, telefonszámot, email címet, valamint két jelszót a regisztrációhoz.
Egy checkbox a hírlevélre való feliratkozáshoz.
A regisztrációs gombra kattintva az adatokat a register() metódus menti el, és megjeleníti a megfelelő visszajelzést.
Angular Komponens Részletek:
Az HttpClient injektálása a HTTP kérések végrehajtásához.
A Regisztracio modell használata az űrlap adatjainak tárolására.
A register() metódus menti el a regisztrációs adatokat az API-n keresztül. Sikeres regisztráció esetén megjeleníti a sikeres visszajelzést, egyébként pedig a sikertelen visszajelzést.
A redirectToLogin() metódus a sikeres regisztráció után átirányítja a felhasználót a bejelentkező oldalra.
A showelrejtPopup() metódus segítségével elrejti a sikertelen regisztráció visszajelzést.
Felhasználó Szolgáltatás:
UserService:
Az HttpClient injektálása az HTTP kérések végrehajtásához.
A getProfilRequest() metódus segítségével lekéri egy felhasználó profiladatait azonosító alapján.
A getUsersByPropertyLike() metódus felhasználókat keres a megadott kritériumok alapján. A keresési érték, oldalszám és kategória alapján meghatározza a lekérdezés paramétereit.
A searchName() metódus segítségével keres egy felhasználót név alapján.
A setprofiladatok() metódus beállítja a felhasználó profiladatait a szolgáltatásban.
A getUserById() metódus lekéri egy felhasználó adatait azonosító alapján.
Dokumentáció:
Regisztrációs Űrlap Komponens:
Egy teljesen responszív regisztrációs űrlapot kínál, amelyen keresztül a felhasználók regisztrálhatnak az alkalmazásba.
A regisztrációs űrlap tartalmazza a vezetéknevet, keresztnevet, felhasználónevet, telefonszámot, email címet és két jelszót.
A regisztrációs gombra kattintva a felhasználók adataikat elmenthetik, majd visszajelzést kapnak a regisztráció sikerességéről vagy sikertelenségéről.
UserService:
A UserService segítséget nyújt a felhasználók adatainak kezeléséhez.
Lehetőséget biztosít a felhasználók profiladatainak lekérdezésére azonosító alapján.
A felhasználók keresése különböző kritériumok alapján történhet, például név alapján vagy tulajdonság alapján.



-----------------------------------------------------------rendezvény kezdeményezés----------------------------------------------
Rendezvény Kezdeményezése Komponens:
HTML Kód Részletek:
Ez a komponens egy olyan űrlapot kínál, amelyen keresztül a felhasználók új rendezvényt kezdeményezhetnek.
Az űrlap különböző lépéseket tartalmaz a rendezvény létrehozásához.
Minden lépéshez tartozik egy cím és egy rövid leírás, hogy segítse a felhasználókat az adatok megadásában.
Az űrlap végén található egy gomb, amely a "Szervezés Indítványozása" műveletet hajtja végre.
Angular Komponens Részletek:
A Router és a SzervezesService injektálása a szükséges funkciókhoz.
A katt() metódus segítségével az űrlap beküldésekor a felhasználót a "szervezeskezd" útvonalra irányítja, ahol folytathatja a szervezés folyamatát.
Dokumentáció:
Rendezvény Kezdeményezése Komponens:
Ez a komponens lehetővé teszi a felhasználók számára, hogy új rendezvényt kezdeményezzenek.
Az űrlap különböző lépéseket tartalmaz a rendezvény részleteinek megadásához.
Minden lépéshez tartozik egy cím és egy rövid leírás, hogy segítse a felhasználókat az adatok megadásában.
Az űrlap beküldése után a felhasználó a "szervezeskezd" útvonalra irányítódik, ahol folytathatja a szervezés folyamatát.